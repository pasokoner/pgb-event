// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    relationMode = "prisma"
}

enum UserRole {
    ADMIN
    MEMBER
}

model User {
    id              String            @id @unique
    username        String            @unique
    fullName        String            @map("full_name")
    password        String?
    role            UserRole          @default(MEMBER)
    auth_session    Session[]
    key             Key[]
    scannedEmployee EventAttendance[]
    updatedAt       DateTime          @updatedAt @map("updated_at")
    createdAt       DateTime          @default(now()) @map("created_at")
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

enum EmploymentStatus {
    JOBORDER
    REGULAR
}

model Employee {
    id                      String            @id @default(cuid())
    firstName               String            @map("first_name")
    lastName                String            @map("last_name")
    middleName              String?           @map("middle_name")
    extensionName           String?           @map("extension_name")
    position                String?
    genericPosition         String?           @map("generic_position")
    officeAcronym           String?           @map("office_acronym")
    officeAssignmentAcronym String?           @map("office_assignment_acronym")
    employmentStatus        EmploymentStatus  @map("employment_status")
    eventAttendance         EventAttendance[]
    office                  Office?           @relation("Office", fields: [officeAcronym], references: [acronym], onDelete: Cascade)
    officeAssignment        Office?           @relation("OfficeAssignment", fields: [officeAssignmentAcronym], references: [acronym], onDelete: Cascade)

    @@index([officeAcronym])
    @@index([officeAssignmentAcronym])
}

enum EventStatus {
    UPCOMING
    ONGOING
    CANCELLED
    ENDED
}

model Event {
    id             String            @id @default(cuid())
    name           String
    date           DateTime
    type           String
    status         EventStatus       @default(UPCOMING)
    eventAttendees EventAttendance[]
    updatedAt      DateTime          @updatedAt @map("updated_at")
    createdAt      DateTime          @default(now()) @map("created_at")
}

model EventAttendance {
    event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId    String
    employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    employeeId String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    date       DateTime @default(now())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([eventId, employeeId])
    @@index([eventId])
    @@index([employeeId])
    @@index([userId])
}

model Office {
    acronym                   String     @id @unique
    name                      String?
    employeesOffice           Employee[] @relation("Office")
    employeesOfficeAssignment Employee[] @relation("OfficeAssignment")
}
